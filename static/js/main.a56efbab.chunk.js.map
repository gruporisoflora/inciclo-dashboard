{"version":3,"sources":["remote/axios.js","components/StepBox.js","components/StepsLine.js","components/ActionArea.js","components/Area.js","App.js","serviceWorker.js","index.js","imgs/background.png"],"names":["_callee","response","regenerator_default","a","wrap","_context","prev","next","axios","get","headers","mode","sent","abrupt","t0","stop","getPodas","StepsBox","_this$props","this","props","cLevel","shouldIDisplay","status","stepName","react_default","createElement","style","flex","height","marginLeft","marginRight","backgroundColor","getColorByCLevel","alignItems","justifyContent","color","fontWeight","fontSize","paddingLeft","paddingRight","display","React","Component","StepsLine","step","flexDirection","StepBox_StepsBox","ActionArea","areaName","children","marginTop","Area","_this$props$poda","poda","id","Button_default","width","borderRadius","margin","onClick","onPress","ListRender","listItems","data","map","index","Area_Area","key","flexWrap","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inFocus","results","resultado","console","log","setState","_this2","className","backgroundImage","concat","Artboard","backgroundSize","overflow","Card_default","justifyItems","alignItens","CardContent_default","ActionArea_ActionArea","StepsLine_StepsLine","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a56efbab.chunk.js","sourcesContent":["import axios from 'axios';\n\nasync function getPodas() {\n  try {\n    const response = await axios.get(\n      'http://inciclo.us-east-2.elasticbeanstalk.com/podas',\n      { headers: { mode: 'cors' } }\n    );\n    return response;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport default getPodas;\n","import React from 'react';\n\nexport default class StepsBox extends React.Component {\n  render() {\n    const { cLevel, status, shouldIDisplay, stepName } = this.props;\n    const getColorByCLevel = cLevel => {\n      if (cLevel === 'LOW') return '#56C577';\n      if (cLevel === 'MEDIUM') return '#FF9C50';\n      if (cLevel === 'HIGH') return '#FF6060';\n      return '#56C577';\n    };\n    const getStatusText = status => {\n      if (status === 'DELAYED') return 'ATRASADO';\n      if (status === 'DONE') return 'FEITO';\n      if (status === 'SCHEDULED') return 'AGENDADO';\n      return null;\n    };\n    return (\n      <div\n        style={{\n          flex: 1,\n          height: 50,\n          marginLeft: '4px',\n          marginRight: '4px',\n          backgroundColor: shouldIDisplay ? getColorByCLevel(cLevel) : 'grey',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: '#2A1725',\n          fontWeight: 'bold',\n          fontSize: '0.5em',\n          paddingLeft: '2px',\n          paddingRight: '2px',\n          display: 'flex'\n        }}\n      >\n        {stepName}\n        {/* {shouldIDisplay ? getStatusText(status) : null} */}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport StepBox from './StepBox';\n\nexport default class StepsLine extends React.Component {\n  render() {\n    const { step, cLevel, status } = this.props;\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'collumn',\n          justifyContent: 'center'\n        }}\n      >\n        <StepBox\n          shouldIDisplay={step === 'NEXT_TO_CABLE'}\n          stepName=\"Crescimento\"\n          cLevel={cLevel}\n          status={status}\n        />\n        <StepBox\n          shouldIDisplay={step === 'IN_INPECTION'}\n          stepName=\"Inspeção\"\n          cLevel={cLevel}\n          status={status}\n        />\n        <StepBox\n          shouldIDisplay={step === 'CHECKED_TO_CUT'}\n          stepName=\"Poda\"\n          cLevel={cLevel}\n          status={status}\n        />\n        <StepBox\n          shouldIDisplay={step === 'GROWING'}\n          stepName=\"Status da Área\"\n          cLevel={cLevel}\n          status={status}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class ActionArea extends React.Component {\n  render() {\n    return (\n      <div>\n        <div\n          style={{\n            display: 'flex',\n            fontSize: 26,\n            color: '#515151',\n            marginLeft: 16,\n            fontWeight: '600'\n          }}\n        >\n          {this.props.areaName ? 'Área ' + this.props.areaName : null}\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            flex: 1\n          }}\n        >\n          <div\n            style={{\n              flex: 1,\n              display: 'flex',\n              justifyContent: 'flex-start',\n              color: '#D2D2D2',\n              fontSize: 110\n            }}\n          >\n            [\n          </div>\n\n          {this.props.children || (\n            <div\n              style={{\n                flex: 10,\n                display: 'flex',\n                fontWeight: 'bold',\n                fontSize: 26,\n                color: '#AEACAC',\n                marginTop: 16,\n                justifyContent: 'center'\n              }}\n            >\n              CLIQUE NA ÁREA DESEJADA\n            </div>\n          )}\n\n          <div\n            style={{\n              flex: 1,\n              display: 'flex',\n              justifyContent: 'flex-end',\n              color: '#D2D2D2',\n              fontSize: 110\n            }}\n          >\n            ]\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default class Area extends React.Component {\n  render() {\n    const { id, cLevel } = this.props.poda;\n\n    const getColorByCLevel = cLevel => {\n      if (cLevel === 'LOW') return '#56C577';\n      if (cLevel === 'MEDIUM') return '#FF9C50';\n      if (cLevel === 'HIGH') return '#FF6060';\n      return '#56C577';\n    };\n\n    return (\n      <Button\n        style={{\n          width: 80,\n          height: 80,\n          borderRadius: 20,\n          backgroundColor: getColorByCLevel(cLevel),\n          color: '#2A1725',\n          fontWeight: 'bold',\n          margin: 16\n        }}\n        onClick={this.props.onPress}\n      >\n        <div> Área {id} </div>\n      </Button>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport getPodas from './remote/axios';\nimport StepLine from './components/StepsLine';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Artboard from './imgs/background.png';\nimport ActionArea from './components/ActionArea';\nimport Area from './components/Area';\n\nfunction ListRender(props) {\n  const data = props.data;\n  const listItems = data.map((poda, index) => (\n    <Area onPress={() => props.onPress(index)} poda={poda} key={index} />\n  ));\n  return (\n    <div\n      style={{\n        flexWrap: 'wrap',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: 32\n      }}\n    >\n      {listItems}\n    </div>\n  );\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inFocus: null,\n      results: {}\n    };\n  }\n\n  async componentDidMount() {\n    const resultado = await getPodas();\n    console.log('Resultado', resultado);\n    this.setState({ results: resultado });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          className=\"App-header\"\n          style={{\n            backgroundImage: `url(${Artboard})`,\n            backgroundSize: 'cover',\n            overflow: 'hidden'\n          }}\n        >\n          <Card\n            className=\"App-card-wrapper\"\n            style={{\n              justifyContent: 'center',\n              justifyItems: 'center',\n              alignItens: 'center'\n            }}\n          >\n            <CardContent style={{ marginLeft: 32, marginRight: 32 }}>\n              <ActionArea\n                areaName={\n                  this.state.inFocus\n                    ? this.state.results.data[this.state.inFocus - 1].id\n                    : null\n                }\n              >\n                {this.state.inFocus && (\n                  <div\n                    style={{\n                      flex: 10,\n                      display: 'flex',\n                      marginTop: 16\n                    }}\n                  >\n                    <StepLine\n                      step={\n                        this.state.results.data[this.state.inFocus - 1].step\n                      }\n                      cLevel={\n                        this.state.results.data[this.state.inFocus - 1].cLevel\n                      }\n                      status={\n                        this.state.results.data[this.state.inFocus - 1].status\n                      }\n                    />\n                  </div>\n                )}\n              </ActionArea>\n              {this.state.results.data ? (\n                <ListRender\n                  onPress={index => this.setState({ inFocus: index + 1 })}\n                  data={this.state.results.data}\n                />\n              ) : null}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.4db2b979.png\";"],"sourceRoot":""}